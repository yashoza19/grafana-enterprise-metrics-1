apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "grafana.com/v1alpha1",
          "kind": "Grafana",
          "metadata": {
            "name": "grafana-sample"
          },
          "spec": {
            "admin_api": {
              "affinity": {},
              "annotations": {},
              "extraArgs": {},
              "extraContainers": [],
              "extraVolumes": [],
              "nodeSelector": {},
              "persistence": {
                "subPath": null
              },
              "podAnnotations": {},
              "podLabels": {},
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": "http-metrics"
                },
                "initialDelaySeconds": 45
              },
              "replicas": 1,
              "resources": {
                "requests": {
                  "cpu": "10m",
                  "memory": "32Mi"
                }
              },
              "securityContext": {},
              "service": {
                "annotations": {},
                "labels": {}
              },
              "strategy": {
                "rollingUpdate": {
                  "maxSurge": 0,
                  "maxUnavailable": 1
                },
                "type": "RollingUpdate"
              },
              "terminationGracePeriodSeconds": 60,
              "tolerations": []
            },
            "alertmanager": {
              "affinity": {},
              "annotations": {},
              "env": [],
              "extraArgs": {},
              "extraContainers": [],
              "extraPorts": [],
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "initContainers": [],
              "nodeSelector": {},
              "persistentVolume": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "annotations": {},
                "enabled": true,
                "size": "1Gi",
                "subPath": ""
              },
              "podAnnotations": {},
              "podDisruptionBudget": {},
              "podLabels": {},
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": "http-metrics"
                },
                "initialDelaySeconds": 45
              },
              "replicas": 1,
              "resources": {
                "requests": {
                  "cpu": "10m",
                  "memory": "32Mi"
                }
              },
              "securityContext": {},
              "service": {
                "annotations": {},
                "labels": {}
              },
              "statefulSet": {
                "enabled": true
              },
              "statefulStrategy": {
                "type": "RollingUpdate"
              },
              "strategy": {
                "rollingUpdate": {
                  "maxSurge": 0,
                  "maxUnavailable": 1
                },
                "type": "RollingUpdate"
              },
              "terminationGracePeriodSeconds": 60,
              "tolerations": []
            },
            "compactor": {
              "affinity": {
                "podAntiAffinity": {
                  "preferredDuringSchedulingIgnoredDuringExecution": [
                    {
                      "podAffinityTerm": {
                        "labelSelector": {
                          "matchExpressions": [
                            {
                              "key": "target",
                              "operator": "In",
                              "values": [
                                "compactor"
                              ]
                            }
                          ]
                        },
                        "topologyKey": "kubernetes.io/hostname"
                      },
                      "weight": 100
                    }
                  ]
                }
              },
              "annotations": {},
              "enabled": true,
              "env": [],
              "extraArgs": {},
              "extraContainers": [],
              "extraPorts": [],
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "initContainers": [],
              "nodeSelector": {},
              "persistentVolume": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "annotations": {},
                "enabled": true,
                "size": "2Gi",
                "subPath": ""
              },
              "podAnnotations": {},
              "podDisruptionBudget": {},
              "podLabels": {},
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": "http-metrics"
                },
                "initialDelaySeconds": 60
              },
              "replicas": 1,
              "resources": {
                "requests": {
                  "cpu": "100m",
                  "memory": "512Mi"
                }
              },
              "securityContext": {},
              "service": {
                "annotations": {},
                "labels": {}
              },
              "strategy": {
                "type": "RollingUpdate"
              },
              "terminationGracePeriodSeconds": 240,
              "tolerations": []
            },
            "config": {
              "admin_api": {
                "leader_election": {
                  "enabled": true,
                  "ring": {
                    "kvstore": {
                      "store": "memberlist"
                    }
                  }
                }
              },
              "admin_client": {
                "storage": {
                  "type": "s3"
                }
              },
              "alertmanager": {
                "data_dir": "/data",
                "enable_api": true,
                "external_url": "/alertmanager",
                "sharding_enabled": true,
                "sharding_ring": {
                  "kvstore": {
                    "store": "memberlist"
                  }
                }
              },
              "api": {
                "response_compression_enabled": true
              },
              "auth": {
                "type": "enterprise"
              },
              "auth_enabled": true,
              "blocks_storage": {
                "backend": "s3",
                "bucket_store": {
                  "sync_dir": "/data/tsdb-sync"
                },
                "tsdb": {
                  "dir": "/data/tsdb"
                }
              },
              "cluster_name": "{{ .Release.Name }}",
              "compactor": {
                "data_dir": "/data",
                "sharding_enabled": true,
                "sharding_ring": {
                  "kvstore": {
                    "store": "memberlist"
                  }
                }
              },
              "distributor": {
                "pool": {
                  "health_check_ingesters": true
                },
                "ring": {
                  "kvstore": {
                    "store": "memberlist"
                  }
                },
                "shard_by_all_labels": true
              },
              "frontend": {
                "log_queries_longer_than": "10s"
              },
              "ingester": {
                "lifecycler": {
                  "final_sleep": "0s",
                  "join_after": "0s",
                  "num_tokens": 512,
                  "ring": {
                    "kvstore": {
                      "store": "memberlist"
                    },
                    "replication_factor": 1
                  }
                },
                "max_transfer_retries": 0
              },
              "ingester_client": {
                "grpc_client_config": {
                  "max_recv_msg_size": 104857600,
                  "max_send_msg_size": 104857600
                }
              },
              "instrumentation": {
                "distributor_client": {
                  "address": "dns:///{{ template \"enterprise-metrics.fullname\" . }}-distributor.{{ .Release.Namespace }}.svc:{{ .Values.config.server.grpc_listen_port }}"
                },
                "enabled": true
              },
              "license": {
                "path": "/license/license.jwt"
              },
              "limits": {
                "enforce_metric_name": false,
                "reject_old_samples": true,
                "reject_old_samples_max_age": "168h"
              },
              "memberlist": {
                "bind_port": 7946
              },
              "querier": {
                "active_query_tracker_dir": "/data/enterprise-metrics/querier",
                "query_ingesters_within": "12h"
              },
              "query_range": {
                "align_queries_with_step": true,
                "cache_results": true,
                "results_cache": {
                  "cache": {
                    "memcached": {
                      "expiration": "1h"
                    },
                    "memcached_client": {
                      "timeout": "1s"
                    }
                  }
                },
                "split_queries_by_interval": "24h"
              },
              "ruler": {
                "enable_alertmanager_discovery": false,
                "enable_api": true,
                "enable_sharding": true,
                "ring": {
                  "kvstore": {
                    "store": "memberlist"
                  }
                },
                "rule_path": "/data"
              },
              "runtime_config": {
                "file": "/var/enterprise-metrics/runtime.yaml"
              },
              "server": {
                "grpc_listen_port": 9095,
                "grpc_server_max_concurrent_streams": 1000,
                "grpc_server_max_recv_msg_size": 104857600,
                "grpc_server_max_send_msg_size": 104857600,
                "http_listen_port": 8080
              },
              "storage": {
                "engine": "blocks"
              },
              "store_gateway": {
                "sharding_enabled": true,
                "sharding_ring": {
                  "kvstore": {
                    "store": "memberlist"
                  }
                }
              }
            },
            "distributor": {
              "affinity": {
                "podAntiAffinity": {
                  "requiredDuringSchedulingIgnoredDuringExecution": [
                    {
                      "labelSelector": {
                        "matchExpressions": [
                          {
                            "key": "target",
                            "operator": "In",
                            "values": [
                              "distributor"
                            ]
                          }
                        ]
                      },
                      "topologyKey": "kubernetes.io/hostname"
                    }
                  ]
                }
              },
              "annotations": {},
              "env": [],
              "extraArgs": {},
              "extraContainers": [],
              "extraPorts": [],
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "initContainers": [],
              "nodeSelector": {},
              "persistence": {
                "subPath": null
              },
              "podAnnotations": {},
              "podDisruptionBudget": {},
              "podLabels": {},
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": "http-metrics"
                },
                "initialDelaySeconds": 45
              },
              "replicas": 1,
              "resources": {
                "requests": {
                  "cpu": "100m",
                  "memory": "512Mi"
                }
              },
              "securityContext": {},
              "service": {
                "annotations": {},
                "labels": {}
              },
              "strategy": {
                "rollingUpdate": {
                  "maxSurge": 0,
                  "maxUnavailable": 1
                },
                "type": "RollingUpdate"
              },
              "terminationGracePeriodSeconds": 60,
              "tolerations": []
            },
            "externalConfigSecretName": "enterprise-metrics-config",
            "externalConfigVersion": "0",
            "gateway": {
              "affinity": {},
              "annotations": {},
              "extraArgs": {},
              "extraContainers": [],
              "extraVolumes": [],
              "initContainers": [],
              "nodeSelector": {},
              "persistence": {
                "subPath": null
              },
              "podAnnotations": {},
              "podLabels": {},
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": "http-metrics"
                },
                "initialDelaySeconds": 45
              },
              "replicas": 1,
              "resources": {
                "requests": {
                  "cpu": "10m",
                  "memory": "32Mi"
                }
              },
              "securityContext": {},
              "service": {
                "annotations": {},
                "labels": {}
              },
              "strategy": {
                "rollingUpdate": {
                  "maxSurge": 0,
                  "maxUnavailable": 1
                },
                "type": "RollingUpdate"
              },
              "terminationGracePeriodSeconds": 60,
              "tolerations": [],
              "useDefaultProxyURLs": true
            },
            "image": {
              "pullPolicy": "IfNotPresent",
              "repository": "grafana/metrics-enterprise",
              "tag": "v1.5.0"
            },
            "ingester": {
              "affinity": {
                "podAntiAffinity": {
                  "requiredDuringSchedulingIgnoredDuringExecution": [
                    {
                      "labelSelector": {
                        "matchExpressions": [
                          {
                            "key": "target",
                            "operator": "In",
                            "values": [
                              "ingester"
                            ]
                          }
                        ]
                      },
                      "topologyKey": "kubernetes.io/hostname"
                    }
                  ]
                }
              },
              "annotations": {},
              "env": [],
              "extraArgs": {},
              "extraContainers": [],
              "extraPorts": [],
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "initContainers": [],
              "nodeSelector": {},
              "persistentVolume": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "annotations": {},
                "enabled": true,
                "size": "2Gi",
                "subPath": ""
              },
              "podAnnotations": {},
              "podDisruptionBudget": {},
              "podLabels": {},
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": "http-metrics"
                },
                "initialDelaySeconds": 60
              },
              "replicas": 1,
              "resources": {
                "requests": {
                  "cpu": "100m",
                  "memory": "512Mi"
                }
              },
              "securityContext": {},
              "service": {
                "annotations": {},
                "labels": {}
              },
              "statefulSet": {
                "enabled": true
              },
              "statefulStrategy": {
                "type": "RollingUpdate"
              },
              "strategy": {
                "rollingUpdate": {
                  "maxSurge": 0,
                  "maxUnavailable": 1
                },
                "type": "RollingUpdate"
              },
              "terminationGracePeriodSeconds": 240,
              "tolerations": []
            },
            "license": {
              "contents": "NOTAVALIDLICENSE",
              "external": false,
              "secretName": "enterprise-metrics-license"
            },
            "memcached": {
              "affinity": {},
              "architecture": "high-availability",
              "arguments": [
                "-m 8192",
                "-o",
                "modern",
                "-v",
                "-I 1m",
                "-c 4096"
              ],
              "clusterDomain": "cluster.local",
              "common": {
                "exampleValue": "common-chart",
                "global": {}
              },
              "enabled": false,
              "extraEnv": [],
              "global": {},
              "hostAliases": [],
              "image": {
                "debug": false,
                "pullPolicy": "IfNotPresent",
                "registry": "docker.io",
                "repository": "memcached",
                "tag": "1.6.9"
              },
              "maxItemMemory": "1048576",
              "metrics": {
                "enabled": true,
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "registry": "quay.io",
                  "repository": "prometheus/memcached-exporter",
                  "tag": "v0.9.0"
                },
                "podAnnotations": {
                  "prometheus.io/port": "9150",
                  "prometheus.io/scrape": "true"
                },
                "portName": "metrics",
                "resources": {
                  "limits": {},
                  "requests": {}
                },
                "service": {
                  "annotations": {
                    "prometheus.io/port": "{{ .Values.metrics.service.port }}",
                    "prometheus.io/scrape": "true"
                  },
                  "port": 9150,
                  "type": "ClusterIP"
                },
                "serviceMonitor": {
                  "enabled": false
                }
              },
              "nodeAffinityPreset": {
                "key": "",
                "type": "",
                "values": []
              },
              "nodeSelector": {},
              "persistence": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "annotations": {},
                "enabled": false,
                "size": "8Gi"
              },
              "podAffinityPreset": "",
              "podAnnotations": {},
              "podAntiAffinityPreset": "soft",
              "portName": "memcache",
              "replicaCount": 1,
              "resources": {
                "limits": {
                  "memory": "9830Mi"
                },
                "requests": {
                  "cpu": "500m",
                  "memory": "9830Mi"
                }
              },
              "securityContext": {
                "enabled": true,
                "fsGroup": 1001,
                "readOnlyRootFilesystem": false,
                "runAsUser": 1001
              },
              "service": {
                "annotations": {},
                "nodePort": "",
                "port": 11211,
                "type": "ClusterIP"
              },
              "tolerations": []
            },
            "memcached-metadata": {
              "affinity": {},
              "architecture": "high-availability",
              "arguments": [
                "-m 512",
                "-o",
                "modern",
                "-v",
                "-I 1m",
                "-c 1024"
              ],
              "clusterDomain": "cluster.local",
              "common": {
                "exampleValue": "common-chart",
                "global": {}
              },
              "enabled": false,
              "extraEnv": [],
              "global": {},
              "hostAliases": [],
              "image": {
                "debug": false,
                "pullPolicy": "IfNotPresent",
                "registry": "docker.io",
                "repository": "memcached",
                "tag": "1.6.9"
              },
              "maxItemMemory": "1048576",
              "metrics": {
                "enabled": true,
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "registry": "quay.io",
                  "repository": "prometheus/memcached-exporter",
                  "tag": "v0.9.0"
                },
                "podAnnotations": {
                  "prometheus.io/port": "9150",
                  "prometheus.io/scrape": "true"
                },
                "portName": "metrics",
                "resources": {
                  "limits": {},
                  "requests": {}
                },
                "service": {
                  "annotations": {
                    "prometheus.io/port": "{{ .Values.metrics.service.port }}",
                    "prometheus.io/scrape": "true"
                  },
                  "port": 9150,
                  "type": "ClusterIP"
                },
                "serviceMonitor": {
                  "enabled": false
                }
              },
              "nodeAffinityPreset": {
                "key": "",
                "type": "",
                "values": []
              },
              "nodeSelector": {},
              "persistence": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "annotations": {},
                "enabled": false,
                "size": "8Gi"
              },
              "podAffinityPreset": "",
              "podAnnotations": {},
              "podAntiAffinityPreset": "soft",
              "portName": "memcache",
              "replicaCount": 1,
              "resources": {
                "limits": {
                  "memory": "614Mi"
                },
                "requests": {
                  "cpu": "500m",
                  "memory": "614Mi"
                }
              },
              "securityContext": {
                "enabled": true,
                "fsGroup": 1001,
                "readOnlyRootFilesystem": false,
                "runAsUser": 1001
              },
              "service": {
                "annotations": {},
                "nodePort": "",
                "port": 11211,
                "type": "ClusterIP"
              },
              "tolerations": []
            },
            "memcached-queries": {
              "affinity": {},
              "architecture": "high-availability",
              "arguments": [
                "-m 2048",
                "-o",
                "modern",
                "-v",
                "-I 15m",
                "-c 1024"
              ],
              "clusterDomain": "cluster.local",
              "common": {
                "exampleValue": "common-chart",
                "global": {}
              },
              "enabled": false,
              "extraEnv": [],
              "global": {},
              "hostAliases": [],
              "image": {
                "debug": false,
                "pullPolicy": "IfNotPresent",
                "registry": "docker.io",
                "repository": "memcached",
                "tag": "1.6.9"
              },
              "maxItemMemory": "15728640",
              "metrics": {
                "enabled": true,
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "registry": "quay.io",
                  "repository": "prometheus/memcached-exporter",
                  "tag": "v0.9.0"
                },
                "podAnnotations": {
                  "prometheus.io/port": "9150",
                  "prometheus.io/scrape": "true"
                },
                "portName": "metrics",
                "resources": {
                  "limits": {},
                  "requests": {}
                },
                "service": {
                  "annotations": {
                    "prometheus.io/port": "{{ .Values.metrics.service.port }}",
                    "prometheus.io/scrape": "true"
                  },
                  "port": 9150,
                  "type": "ClusterIP"
                },
                "serviceMonitor": {
                  "enabled": false
                }
              },
              "nodeAffinityPreset": {
                "key": "",
                "type": "",
                "values": []
              },
              "nodeSelector": {},
              "persistence": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "annotations": {},
                "enabled": false,
                "size": "8Gi"
              },
              "podAffinityPreset": "",
              "podAnnotations": {},
              "podAntiAffinityPreset": "soft",
              "portName": "memcache",
              "replicaCount": 1,
              "resources": {
                "limits": {
                  "memory": "2457Mi"
                },
                "requests": {
                  "cpu": "500m",
                  "memory": "2457Mi"
                }
              },
              "securityContext": {
                "enabled": true,
                "fsGroup": 1001,
                "readOnlyRootFilesystem": false,
                "runAsUser": 1001
              },
              "service": {
                "annotations": {},
                "nodePort": "",
                "port": 11211,
                "type": "ClusterIP"
              },
              "tolerations": []
            },
            "minio": {
              "DeploymentUpdate": {
                "maxSurge": "100%",
                "maxUnavailable": 0,
                "type": "RollingUpdate"
              },
              "StatefulSetUpdate": {
                "updateStrategy": "RollingUpdate"
              },
              "accessKey": "enterprise-metrics",
              "affinity": {},
              "azuregateway": {
                "enabled": false,
                "replicas": 4
              },
              "bucketRoot": "",
              "buckets": [
                {
                  "name": "enterprise-metrics-tsdb",
                  "policy": "none",
                  "purge": false
                },
                {
                  "name": "enterprise-metrics-admin",
                  "policy": "none",
                  "purge": false
                },
                {
                  "name": "enterprise-metrics-ruler",
                  "policy": "none",
                  "purge": false
                }
              ],
              "certsPath": "/etc/minio/certs/",
              "clusterDomain": "cluster.local",
              "configPathmc": "/etc/minio/mc/",
              "defaultBucket": {
                "enabled": false,
                "name": "bucket",
                "policy": "none",
                "purge": false
              },
              "drivesPerNode": 1,
              "enabled": true,
              "environment": {},
              "etcd": {
                "clientCert": "",
                "clientCertKey": "",
                "corednsPathPrefix": "",
                "endpoints": [],
                "pathPrefix": ""
              },
              "existingSecret": "",
              "extraArgs": [],
              "fullnameOverride": "",
              "gcsgateway": {
                "enabled": false,
                "gcsKeyJson": "",
                "projectId": "",
                "replicas": 4
              },
              "global": {},
              "helmKubectlJqImage": {
                "pullPolicy": "IfNotPresent",
                "repository": "bskim45/helm-kubectl-jq",
                "tag": "3.1.0"
              },
              "image": {
                "pullPolicy": "IfNotPresent",
                "repository": "minio/minio",
                "tag": "RELEASE.2020-12-03T05-49-24Z"
              },
              "imagePullSecrets": [],
              "ingress": {
                "annotations": {},
                "enabled": false,
                "hosts": [
                  "chart-example.local"
                ],
                "labels": {},
                "path": "/",
                "tls": []
              },
              "makeBucketJob": {
                "resources": {
                  "requests": {
                    "memory": "128Mi"
                  }
                },
                "securityContext": {
                  "enabled": false,
                  "fsGroup": 1000,
                  "runAsGroup": 1000,
                  "runAsUser": 1000
                }
              },
              "mcImage": {
                "pullPolicy": "IfNotPresent",
                "repository": "minio/mc",
                "tag": "RELEASE.2020-11-25T23-04-07Z"
              },
              "metrics": {
                "serviceMonitor": {
                  "additionalLabels": {},
                  "enabled": false,
                  "relabelConfigs": {}
                }
              },
              "mode": "standalone",
              "mountPath": "/export",
              "nameOverride": "",
              "nasgateway": {
                "enabled": false,
                "replicas": 4
              },
              "networkPolicy": {
                "allowExternal": true,
                "enabled": false
              },
              "nodeSelector": {},
              "persistence": {
                "VolumeName": "",
                "accessMode": "ReadWriteOnce",
                "enabled": true,
                "existingClaim": "",
                "size": "5Gi",
                "storageClass": "",
                "subPath": ""
              },
              "podAnnotations": {},
              "podDisruptionBudget": {
                "enabled": false,
                "maxUnavailable": 1
              },
              "podLabels": {},
              "priorityClassName": "",
              "replicas": 4,
              "resources": {
                "requests": {
                  "cpu": "100m",
                  "memory": "128Mi"
                }
              },
              "s3gateway": {
                "accessKey": "",
                "enabled": false,
                "replicas": 4,
                "secretKey": "",
                "serviceEndpoint": ""
              },
              "secretKey": "supersecret",
              "securityContext": {
                "enabled": true,
                "fsGroup": 1000,
                "runAsGroup": 1000,
                "runAsUser": 1000
              },
              "service": {
                "annotations": {},
                "externalIPs": [],
                "nodePort": 32000,
                "port": 9000,
                "type": "ClusterIP"
              },
              "serviceAccount": {
                "create": true
              },
              "tls": {
                "certSecret": "",
                "enabled": false,
                "privateKey": "private.key",
                "publicCrt": "public.crt"
              },
              "tolerations": [],
              "trustedCertsSecret": "",
              "updatePrometheusJob": {
                "securityContext": {
                  "enabled": false,
                  "fsGroup": 1000,
                  "runAsGroup": 1000,
                  "runAsUser": 1000
                }
              },
              "zones": 1
            },
            "overrides_exporter": {
              "affinity": {},
              "annotations": {},
              "extraArgs": {},
              "extraContainers": [],
              "extraVolumes": [],
              "livenessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": "http-metrics"
                },
                "initialDelaySeconds": 45
              },
              "nodeSelector": {},
              "persistence": {
                "subPath": null
              },
              "podAnnotations": {},
              "podLabels": {},
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": "http-metrics"
                },
                "initialDelaySeconds": 45
              },
              "replicas": 1,
              "resources": {
                "requests": {
                  "cpu": "100m",
                  "memory": "128Mi"
                }
              },
              "securityContext": {},
              "service": {
                "annotations": {},
                "labels": {}
              },
              "strategy": {
                "rollingUpdate": {
                  "maxSurge": 0,
                  "maxUnavailable": 1
                },
                "type": "RollingUpdate"
              },
              "terminationGracePeriodSeconds": 60,
              "tolerations": []
            },
            "querier": {
              "affinity": {
                "podAntiAffinity": {
                  "preferredDuringSchedulingIgnoredDuringExecution": [
                    {
                      "podAffinityTerm": {
                        "labelSelector": {
                          "matchExpressions": [
                            {
                              "key": "target",
                              "operator": "In",
                              "values": [
                                "querier"
                              ]
                            }
                          ]
                        },
                        "topologyKey": "kubernetes.io/hostname"
                      },
                      "weight": 100
                    }
                  ]
                }
              },
              "annotations": {},
              "env": [],
              "extraArgs": {},
              "extraContainers": [],
              "extraPorts": [],
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "initContainers": [],
              "nodeSelector": {},
              "persistence": {
                "subPath": null
              },
              "podAnnotations": {},
              "podDisruptionBudget": {},
              "podLabels": {},
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": "http-metrics"
                },
                "initialDelaySeconds": 45
              },
              "replicas": 2,
              "resources": {
                "requests": {
                  "cpu": "100m",
                  "memory": "128Mi"
                }
              },
              "securityContext": {},
              "service": {
                "annotations": {},
                "labels": {}
              },
              "strategy": {
                "rollingUpdate": {
                  "maxSurge": 0,
                  "maxUnavailable": 1
                },
                "type": "RollingUpdate"
              },
              "terminationGracePeriodSeconds": 180,
              "tolerations": []
            },
            "query_frontend": {
              "affinity": {
                "podAntiAffinity": {
                  "preferredDuringSchedulingIgnoredDuringExecution": [
                    {
                      "podAffinityTerm": {
                        "labelSelector": {
                          "matchExpressions": [
                            {
                              "key": "target",
                              "operator": "In",
                              "values": [
                                "query-frontend"
                              ]
                            }
                          ]
                        },
                        "topologyKey": "kubernetes.io/hostname"
                      },
                      "weight": 100
                    }
                  ]
                }
              },
              "annotations": {},
              "env": [],
              "extraArgs": {},
              "extraContainers": [],
              "extraPorts": [],
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "initContainers": [],
              "nodeSelector": {},
              "persistence": {
                "subPath": null
              },
              "podAnnotations": {},
              "podDisruptionBudget": {},
              "podLabels": {},
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": "http-metrics"
                },
                "initialDelaySeconds": 45
              },
              "replicas": 1,
              "resources": {
                "requests": {
                  "cpu": "100m",
                  "memory": "128Mi"
                }
              },
              "securityContext": {},
              "service": {
                "annotations": {},
                "labels": {}
              },
              "strategy": {
                "rollingUpdate": {
                  "maxSurge": 0,
                  "maxUnavailable": 1
                },
                "type": "RollingUpdate"
              },
              "terminationGracePeriodSeconds": 180,
              "tolerations": []
            },
            "rbac": {
              "create": true,
              "pspEnabled": false
            },
            "ruler": {
              "affinity": {},
              "annotations": {},
              "env": [],
              "extraArgs": {},
              "extraContainers": [],
              "extraPorts": [],
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "initContainers": [],
              "nodeSelector": {},
              "persistence": {
                "subPath": null
              },
              "podAnnotations": {},
              "podDisruptionBudget": {},
              "podLabels": {},
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": "http-metrics"
                },
                "initialDelaySeconds": 45
              },
              "replicas": 1,
              "resources": {
                "requests": {
                  "cpu": "100m",
                  "memory": "128Mi"
                }
              },
              "securityContext": {},
              "service": {
                "annotations": {},
                "labels": {}
              },
              "strategy": {
                "rollingUpdate": {
                  "maxSurge": 0,
                  "maxUnavailable": 1
                },
                "type": "RollingUpdate"
              },
              "terminationGracePeriodSeconds": 180,
              "tolerations": []
            },
            "runtimeConfig": {},
            "serviceAccount": {
              "annotations": {},
              "create": true,
              "name": null
            },
            "store_gateway": {
              "affinity": {
                "podAntiAffinity": {
                  "requiredDuringSchedulingIgnoredDuringExecution": [
                    {
                      "labelSelector": {
                        "matchExpressions": [
                          {
                            "key": "target",
                            "operator": "In",
                            "values": [
                              "store-gateway"
                            ]
                          }
                        ]
                      },
                      "topologyKey": "kubernetes.io/hostname"
                    }
                  ]
                }
              },
              "annotations": {},
              "env": [],
              "extraArgs": {},
              "extraContainers": [],
              "extraPorts": [],
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "initContainers": [],
              "nodeSelector": {},
              "persistentVolume": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "annotations": {},
                "enabled": true,
                "size": "2Gi",
                "subPath": ""
              },
              "podAnnotations": {},
              "podDisruptionBudget": {},
              "podLabels": {},
              "readinessProbe": {
                "httpGet": {
                  "path": "/ready",
                  "port": "http-metrics"
                },
                "initialDelaySeconds": 60
              },
              "replicas": 1,
              "resources": {
                "requests": {
                  "cpu": "100m",
                  "memory": "512Mi"
                }
              },
              "securityContext": {},
              "service": {
                "annotations": {},
                "labels": {}
              },
              "strategy": {
                "type": "RollingUpdate"
              },
              "terminationGracePeriodSeconds": 240,
              "tolerations": []
            },
            "tokengenJob": {
              "annotations": {},
              "enable": true,
              "env": [],
              "extraArgs": {}
            },
            "useExternalConfig": false,
            "useExternalLicense": false
          }
        }
      ]
    capabilities: Basic Install
    categories: Observability
    description: An operator to install Grafana enterprise Metrics (GEM) in OpenShift
    containerImage: docker.io/patrickabrennan/enterprise-metrics-controller-bundle
    support: "Grafana Labs"
    operators.operatorframework.io/builder: operator-sdk-v1.10.0+git
    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1
  name: grafana-enterprise-metrics.v0.0.1
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - kind: Grafana
      name: grafanas.grafana.com
      version: v1alpha1
      displayName: Grafana Enterprise Metrics CR
      description: Grafana Enterprise Metrics CR is the representation of a Grafana Enterprise Metrics deployment on OpenShift cluster.
      resources:
      - kind: Grafana
        name: ''
        version: v1alpha1
      - kind: Secret
        name: ''
        version: v1alpha1
      specDescriptors:
      - displayName: Cluster Name
        description: Uniquely Name for the GEM Cluster
        path: image.cluster_name
        x-descriptors:
          - 'urn:alm:descriptor:com.tectonic.ui:text'
          - 'urn:alm:descriptor:com.tectonic.ui:fieldGroup:Image'
      - displayName: License File
        description: Name and location of the license file
        path: license.contents
        x-descriptors:
          - 'urn:alm:descriptor:com.tectonic.ui:text'
          - 'urn:alm:descriptor:com.tectonic.ui:fieldGroup:Secret'
      - displayName: Image Repository
        description: image repository for GEM image, 'grafana/metrics-enterprise' by default
        path: image.repository
        x-descriptors:
          - 'urn:alm:descriptor:com.tectonic.ui:text'
          - 'urn:alm:descriptor:com.tectonic.ui:fieldGroup:Image'
      - displayName: Image Tag
        description: image version tag for GEM image, 'v1.5.0' by default
        path: image.tag
        x-descriptors:
          - 'urn:alm:descriptor:com.tectonic.ui:text'
          - 'urn:alm:descriptor:com.tectonic.ui:fieldGroup:Image'
      - displayName: Memcached
        description: Specifies whether Memchached should be turned on, off by default, but strongly recommended
        path: memcached.enabled
        x-descriptors:
          - 'urn:alm:descriptor:com.tectonic.ui:booleanSwitch'
      - displayName: Memcached queries
        description: Specifies whether Memchached Queries should be turned on, off by default, but strongly recommended
        path: memcached-queries.enabled
        x-descriptors:
          - 'urn:alm:descriptor:com.tectonic.ui:booleanSwitch'
      - displayName: Memcached metadata
        description: Specifies whether Memchached Metadata should be turned on, off by default, but strongly recommended
        path: memcached-metadata.enabled
        x-descriptors:
          - 'urn:alm:descriptor:com.tectonic.ui:booleanSwitch'
  description: An operator to install Grafana Enterprise Metrics (GEM) on OpenShift
  displayName: Grafana Enterprise Metrics (GEM) Operator
  icon:
  - base64data: "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"
    mediatype: "png"
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
        - apiGroups:
          - grafana.com
          resources:
          - grafanas
          - grafanas/status
          - grafanas/finalizers
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - security.openshift.io
          resourceNames:
          - anyuid
          resources:
          - securitycontextconstraints
          verbs:
          - use
        - apiGroups:
          - ""
          resources:
          - configmaps
          - persistentvolumeclaims
          - secrets
          - serviceaccounts
          - services
          verbs:
          - '*'
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - rolebindings
          - roles
          verbs:
          - '*'
        - apiGroups:
          - apps
          resources:
          - deployments
          - statefulsets
          verbs:
          - '*'
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: grafana-enterprise-metrics-controller-manager
      deployments:
      - name: grafana-enterprise-metrics-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              labels:
                control-plane: controller-manager
            spec:
              containers:
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=10
                image: registry.redhat.io/openshift4/ose-kube-rbac-proxy:v4.7.0
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                  protocol: TCP
                resources: {}
              - args:
                - --health-probe-bind-address=:8081
                - --metrics-bind-address=127.0.0.1:8080
                - --leader-elect
                - --leader-election-id=grafana-enterprise-metrics
                image: docker.io/patrickabrennan/enterprise-metrics-controller:v0.0.1
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8081
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: manager
                readinessProbe:
                  httpGet:
                    path: /readyz
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: 800m
                    memory: 1Gi
                  requests:
                    cpu: 800m
                    memory: 60Mi
                securityContext:
                  allowPrivilegeEscalation: false
              securityContext:
                runAsNonRoot: true
              serviceAccountName: grafana-enterprise-metrics-controller-manager
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: grafana-enterprise-metrics-controller-manager
    strategy: deployment
  installModes:
  - supported: false
    type: OwnNamespace
  - supported: false
    type: SingleNamespace
  - supported: false
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - Grafana Enterprise Metrics
  - GEM
  - Metrics
  - Observability
  links:
  - name: Grafana Enterprise Metrics
    url: https://grafana-enterprise-metrics.domain
  maturity: alpha
  provider:
    name: Grafana Labs
    url: https://grafana.com
  version: 0.0.1
